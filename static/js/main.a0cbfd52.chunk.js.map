{"version":3,"sources":["components/Notification.jsx","components/Section/Section.jsx","components/FeedBackOptions/FeedBackOptions.jsx","components/Statistic/Statistic.jsx","components/CafeStatistic/CafeStatistic.jsx","App.js","index.js"],"names":["Notification","message","Section","title","children","FeedBackOptions","btnElement","options","map","id","name","onClick","Statistic","good","neutral","bad","total","positivePercentage","CafeStatistic","state","handleClick","statName","setState","prevValue","countTotalFeedback","Object","values","reduce","acum","value","countPositiveFeedbackPercentage","toFixed","createFeedbackOptions","this","Component","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOASeA,EAPM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,mCACA,4BAAIA,OCMGC,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACA,qCACQ,6BAAKD,IACJC,MCGEC,EATS,SAAC,GAAiB,IAChCC,EAD+B,EAAdC,QACIC,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACxC,OACI,wBAAiBA,QAASA,EAA1B,SAAqCD,GAAxBD,MAGjB,OAAM,yCAAIH,EAAJ,QCSCM,EAfG,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,KAAKC,EAA0C,EAA1CA,QAAQC,EAAkC,EAAlCA,IAAIC,EAA8B,EAA9BA,MAAMC,EAAwB,EAAxBA,mBAEvC,OACI,mCACA,gCACY,sCAAUJ,KACV,yCAAaC,KACb,qCAAQC,KACR,wCAAYC,KACZ,oDAAwBC,EAAxB,aCAdC,E,4MACFC,MAAQ,CACJN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAgBTK,YAAc,SAACC,GACX,EAAKC,UAAS,SAACH,GACX,IAAMI,EAAYJ,EAAME,GACxB,OAAO,eACNA,EAAWE,EAAY,O,EAKhCC,mBAAqB,WAGjB,OAFcC,OAAOC,OAAO,EAAKP,OACfQ,QAAO,SAACC,EAAMC,GAAP,OAAiBD,EAAOC,M,EAIrDC,gCAAkC,WAC9B,IAAOjB,EAAQ,EAAKM,MAAbN,KACDG,EAAQ,EAAKQ,qBACnB,OAAKR,GAGcH,EAAOG,EAAS,KAAKe,QAAQ,GAFrC,G,EAQfC,sBAAwB,WAkBpB,MAjBwB,CAEpB,CACIvB,GAAI,IACJC,KAAM,OACNC,QAAQ,kBAAI,EAAKS,YAAY,UAEjC,CACIX,GAAI,IACJC,KAAM,UACNC,QAAQ,kBAAI,EAAKS,YAAY,aAEjC,CACIX,GAAI,IACJC,KAAM,MACNC,QAAQ,kBAAI,EAAKS,YAAY,W,4CAKzC,WACK,IAAMJ,EAAQiB,KAAKT,qBAGpB,OACI,qCACI,cAAC,EAAD,CAASrB,MAAM,wBAAf,SACA,cAAC,EAAD,CAAiBI,QAAS0B,KAAKD,4BAG/B,cAAC,EAAD,CAAS7B,MAAM,aAAf,SACKa,EAAQ,cAAC,EAAD,2BAAeiB,KAAKd,OAApB,IAA2BH,MAAOA,EAAOC,mBAAoBgB,KAAKH,qCACzE,cAAC,EAAD,CAAc7B,QAAQ,+B,GAhFhBiC,aAAtBhB,EAOKiB,aAAe,CAClBtB,KAAM,EACNC,QAAS,EACTC,IAAK,GAgFEG,QCxFAkB,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a0cbfd52.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    return (\r\n        <>\r\n        <p>{message}</p>\r\n        </>\r\n    )\r\n}\r\nexport default Notification","\r\n\r\nconst Section = ({ title, children }) => {\r\n    return(\r\n    <>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </>\r\n        )\r\n}\r\n\r\nexport default Section","const FeedBackOptions = ({ options }) => {\r\n    const btnElement = options.map(({ id, name, onClick }) => {\r\n        return (\r\n            <button key={id} onClick={onClick}>{ name}</button>\r\n        )\r\n    })\r\n        return<> {btnElement} </>\r\n}\r\n\r\nexport default FeedBackOptions","const Statistic = ({good,neutral,bad,total,positivePercentage}) => {\r\n    \r\n    return (\r\n        <>\r\n        <div>\r\n                    <p>Good:{ good }</p>\r\n                    <p>Neutral:{ neutral }</p>\r\n                    <p>Bad:{bad}</p>\r\n                    <p>Total: { total}</p>\r\n                    <p>Positive feedback: { positivePercentage}%</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Statistic","import React,{Component} from 'react'\r\n// import styles from './CafeStatistic.module.css'\r\nimport Notification from \"../Notification\"\r\nimport PropTypes from 'prop-types'\r\nimport Section from \"../Section\"\r\nimport FeedBackOptions from \"../FeedBackOptions\"\r\nimport Statistic from \"../Statistic\"\r\n\r\n\r\nclass CafeStatistic extends Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0\r\n    }\r\n\r\n    static defaultProps = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0\r\n    }\r\n\r\n    static propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired\r\n}\r\n\r\n\r\n    handleClick = (statName) => {\r\n        this.setState((state) => {\r\n            const prevValue = state[statName];\r\n            return {\r\n            [statName]: prevValue + 1\r\n            }            \r\n        })\r\n    }\r\n\r\n    countTotalFeedback = () => {\r\n        const stats = Object.values(this.state);\r\n        const sum = stats.reduce((acum, value) => acum + value);\r\n        return sum;\r\n    }\r\n\r\n    countPositiveFeedbackPercentage = () => {\r\n        const {good} = this.state;\r\n        const total = this.countTotalFeedback()\r\n        if (!total) {\r\n            return 0\r\n        }\r\n        const totalSum = ((good / total) * 100).toFixed(0);\r\n\r\n        return totalSum\r\n        \r\n    }\r\n\r\n    createFeedbackOptions = () => {\r\n        const feedbackOptions = [\r\n            \r\n            {\r\n                id: \"1\",\r\n                name: \"good\",\r\n                onClick:()=>this.handleClick(\"good\")\r\n            },\r\n            {\r\n                id: \"2\",\r\n                name: \"neutral\",\r\n                onClick:()=>this.handleClick(\"neutral\")\r\n            },\r\n            {\r\n                id: \"3\",\r\n                name: \"bad\",\r\n                onClick:()=>this.handleClick(\"bad\")\r\n            }]\r\n        return feedbackOptions\r\n    }\r\n    \r\n    render() {\r\n         const total = this.countTotalFeedback()\r\n        \r\n        \r\n        return (\r\n            <>\r\n                <Section title=\"Please leave feedback\">\r\n                <FeedBackOptions options={this.createFeedbackOptions()} />\r\n\r\n                </Section>\r\n                <Section title=\"Statistics\">\r\n                    {total ? <Statistic {...this.state} total={total} positivePercentage={this.countPositiveFeedbackPercentage()} />\r\n                    : <Notification message=\"No feedback given\" />}\r\n                    \r\n                </Section>\r\n               \r\n           \r\n                \r\n        </>)\r\n    }\r\n}\r\n \r\nexport default CafeStatistic;\r\n\r\n","import React from 'react';\nimport CafeStatistic from \"./components/CafeStatistic\"\n\nfunction App() {\n  return (\n    <>\n      <CafeStatistic />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}